{"version":3,"sources":["practice/actions/PuzzleAction.js","App.js","serviceWorker.js","practice/reducers/PuzzleReducer.js","practice/reducers/Rootreducer.js","index.js","practice/store/store.js"],"names":["initialData","data","name","age","gender","dispatch","type","payload","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","bind","assertThisInitialized","event","console","log","target","value","length","Datafetch","DataFetch","undefined","List","map","item","react_default","a","createElement","Container","fluid","Row","Table","striped","bordered","hover","onChange","Component","connect","state","Boolean","window","location","hostname","match","combineReducers","arguments","action","objectSpread","initialdata","selected","succsessData","filter","obj","key","includes","store","createStore","rootreducer","applyMiddleware","thunk","jsx","es","src_App","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.413b3fe8.chunk.js","sourcesContent":["\r\nexport function initialData() {\r\n const data = [{name:\"pradip\",age:\"27\",gender:\"male\"},{name:\"onkar\",age:\"26\",gender:\"male\"},{name:\"mahavir\",age:\"27\",gender:\"male\"}];\r\n    return  dispatch =>{\r\n           dispatch({ type:\"TEST_RANDOM_DATA\", payload:data});\r\n    }\r\n}\r\n\r\nexport function FetchingRequest(data) {\r\n    return  dispatch =>{\r\n           dispatch({ type:\"SOLVE_DATA\",payload:data});\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\nimport {initialData,FetchingRequest} from \"./practice/actions/PuzzleAction\";\nimport {Col,Row,Container,Table} from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.dispatch(initialData());\n    }\n    onChangeHandler(event) {\n        console.log(\"evenet\",event.target.value)\n        if(event.target.value.length!==0){\n            this.props.dispatch(FetchingRequest(event.target.value));\n        }\n        else{\n            this.props.dispatch(initialData());\n        }\n    }\n    \n    render() {  \n     \n          var Data = this.props.Datafetch;\n          var data=Data.DataFetch;\n          console.log(\"data\",data);\n          if(data !==undefined){\n           var List=data.map((item)=>\n                <tr>\n                    <td>{item.name}</td>\n                    <td>{item.age}</td>\n                    <td>{item.gender}</td>\n                </tr>\n            )\n          }\n        return (\n            <div>\n              <Container fluid={true}>\n                    <Row>\n                        <div>\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                <th>Name</th>\n                                <th>Age</th>\n                                <th>Gender</th>\n                                </tr>\n                                <tr>\n                                <th><input type=\"text\" onChange={this.onChangeHandler}/></th>\n                                <th><input type=\"text\" /></th>\n                                <th><input type=\"text\" /></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {List}\n                            </tbody>\n                          </Table>\n                         </div>\n                      </Row>\n               </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        Datafetch: state.DataFetch\n    };\n};\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const DataFetch = [];\r\n\r\nexport default (state = DataFetch, action) => {\r\n    switch (action.type) {\r\n        case 'TEST_RANDOM_DATA':\r\n            return {\r\n                ...state,DataFetch:action.payload,\r\n            }\r\n        case 'SOLVE_DATA':\r\n           var initialdata=state.DataFetch;\r\n           console.log(\"initialdata\",initialdata);\r\n           var selected=action.payload;\r\n           console.log(\"selected\",selected)\r\n           \r\n                let succsessData=initialdata.filter(function(obj){\r\n                    for(var key in obj){\r\n                        console.log(\"obj\",obj[key]);\r\n                        if(obj[key].includes(selected)){\r\n                            return obj;\r\n                        }\r\n                    }\r\n                });\r\n\r\n            return {\r\n                ...state,DataFetch:succsessData\r\n            }\r\n        default:\r\n            return state;\r\n     }\r\n}","import PuzzleReducer from './PuzzleReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nexport default combineReducers({\r\n    DataFetch:PuzzleReducer\r\n\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Mystore from './practice/store/store';\nimport {Provider} from 'react-redux';\n\nconst store = Mystore();\n\nconst jsx= (\n    <Provider store={store}>\n       <App />          \n    </Provider>\n)\nconsole.log(store.getState())\nReactDOM.render(jsx, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// const element=<h1>welcome to Website</h1>\n\n// ReactDOM.render(element,document.getElementById('root'));","import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootreducer from '../reducers/Rootreducer';\r\n\r\n\r\nexport default()=>{\r\n    const store = createStore(rootreducer,applyMiddleware(thunk));\r\n    return store;\r\n}\r\n\r\n"],"sourceRoot":""}